PROBLEM-1:
Given an array a[] of size N which contains elements from 0 to N-1, you need to find all the elements occurring more than once in the given array.

Example 1:

Input:
N = 4
a[] = {0,3,1,2}
Output: -1
Explanation: N=4 and all elements from 0
to (N-1 = 3) are present in the given
array. Therefore output is -1.
Example 2:

Input:
N = 5
a[] = {2,3,1,2,3}
Output: 2 3 
Explanation: 2 and 3 occur more than once
in the given array.
Your Task:
Complete the function duplicates() which takes array a[] and n as input as parameters and returns a list of elements that occur more than once in the given array in sorted manner. If no such element is found, return list containing [-1]. 

Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).
Note : The extra space is only for the array to be returned.
Try and perform all operation withing the provided array. 

Constraints:
1 <= N <= 105
0 <= A[i] <= N-1, for each valid i


CODE:

def duplicates(self, arr, n): 
    	# code here
    	res=[]
    	s=set(arr)
    	if len(s)==n:
    	    res.append(-1)
    	    return res
    	else:
    	   for i in range(n):
    	       x=arr[i]%n
    	       arr[x]=arr[x]+n
    	   for i in range(0,n):
    	       if(arr[i]>=n*2):
    	           res.append(i)
    	   return res
           
PROBLEM-2:
Given a sorted array containing only 0s and 1s, find the transition point. 


Example 1:

Input:
N = 5
arr[] = {0,0,0,1,1}
Output: 3
Explanation: index 3 is the transition 
point where 1 begins.

Example 2:

Input:
N = 4
arr[] = {0,0,0,0}
Output: -1
Explanation: Since, there is no "1",
the answer is -1.

Your Task:
You don't need to read input or print anything. The task is to complete the function transitionPoint() that takes array and N as input parameters and returns the 0 based index of the position where "0" ends and "1" begins. If array does not have any 1s, return -1. If array does not have any 0s, return 0.


Expected Time Complexity: O(LogN)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ N ≤ 500000
0 ≤ arr[i] ≤ 1


def transitionPoint(arr, n):
    #Code here
    
    def bin_sear(arr,low,high):
        if low<=high:
            if low==high:
                if(arr[low]==1):
                    return low
                else:
                    return -1
            else:
                mid=(low+high)//2
                if mid<n:
                    
                    if(arr[mid])==1 and arr[mid-1]!=1:
                        return mid
                    if(arr[mid]==1 and arr[mid-1]==1):
                        return bin_sear(arr,0,mid-1)
                    if arr[mid]==1 and arr[mid+1]==0:
                        return -1
                    if arr[mid]==0:
                        #print(bin_sear(arr,mid+1,high))
                        return bin_sear(arr,mid+1,high)
                        
                    
        else:
            return -1
    if n!=0:
        return bin_sear(arr,0,n-1)
    else:
        return -1
